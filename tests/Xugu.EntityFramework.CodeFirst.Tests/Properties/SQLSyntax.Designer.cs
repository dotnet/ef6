//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xugu.EntityFramework.CodeFirst.Tests.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SQLSyntax {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SQLSyntax() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Xugu.EntityFramework.CodeFirst.Tests.Properties.SQLSyntax", typeof(SQLSyntax).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性，对
        ///   使用此强类型资源类的所有资源查找执行重写。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///1 AS `C1`, 
        ///`Project3`.`nCdSite`, 
        ///`Project3`.`C1` AS `C2`
        ///FROM (SELECT
        ///`visitante`.`nCdSite`, 
        ///COUNT(DISTINCT `visitante`.`sDsIp`) AS `C1`
        ///FROM `visitante`
        /// GROUP BY 
        ///`visitante`.`nCdSite`) AS `Project3` 的本地化字符串。
        /// </summary>
        internal static string CountGroupBy {
            get {
                return ResourceManager.GetString("CountGroupBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///1 AS `C1`, 
        ///`Project3`.`nCdSite`, 
        ///`Project3`.`C1` AS `C2`
        ///FROM (SELECT
        ///`Extent4`.`nCdSite`, 
        ///COUNT(DISTINCT `Extent4`.`sDsIp`) AS `C1`
        ///FROM `pagina` AS `Extent3` INNER JOIN `visitante` AS `Extent4` ON `Extent3`.`nCdVisitante` = `Extent4`.`nCdVisitante`
        /// GROUP BY 
        ///`Extent4`.`nCdSite`) AS `Project3` 的本地化字符串。
        /// </summary>
        internal static string CountGroupBy2 {
            get {
                return ResourceManager.GetString("CountGroupBy2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT 
        ///`Apply1`.`customer_id`, 
        ///`Extent5`.`country`
        /// FROM (SELECT 
        ///`Extent1`.`customer_id`, 
        ///`Extent1`.`store_id`, 
        ///`Extent1`.`first_name`, 
        ///`Extent1`.`last_name`, 
        ///`Extent1`.`email`, 
        ///`Extent1`.`address_id`, 
        ///`Extent1`.`active`, 
        ///`Extent1`.`create_date`, 
        ///`Extent1`.`last_update`, 
        ///(SELECT 
        ///`Project1`.`address_id`
        /// FROM `sakila`.`address` AS `Project1`
        /// WHERE `Project1`.`address_id` = `Extent1`.`address_id`
        /// ORDER BY 
        ///`Project1`.`address_id` DESC LIMIT 1) AS `ADDRESS_ID1`, 
        ///(SELECT 
        ///`Pr [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FirstOrDefaultNestedWithOrderBy {
            get {
                return ResourceManager.GetString("FirstOrDefaultNestedWithOrderBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///  `Project1`.`ID`, 
        ///  `Project1`.`Title`, 
        ///  `Project1`.`ReleaseDate`, 
        ///  `Project1`.`Genre`, 
        ///  `Project1`.`Price`, 
        ///  `Project1`.`Data`, 
        ///  `Project1`.`Director_ID`
        ///  FROM `Movies` AS `Project1`
        ///   WHERE `Project1`.`ReleaseDate` &gt;= :p__linq__0
        ///   ORDER BY 
        ///  `Project1`.`ReleaseDate` DESC LIMIT 2 的本地化字符串。
        /// </summary>
        internal static string NestedOrderBy {
            get {
                return ResourceManager.GetString("NestedOrderBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///`Extent1`.`ID`, 
        ///`Extent1`.`Title`, 
        ///`Extent1`.`ReleaseDate`, 
        ///`Extent1`.`Genre`, 
        ///`Extent1`.`Price`, 
        ///`Extent1`.`Data`, 
        ///`Extent1`.`Director_ID`
        ///FROM `Movies` AS `Extent1`
        /// WHERE `Extent1`.`Title` LIKE :p__linq__0 的本地化字符串。
        /// </summary>
        internal static string QueryWithContains {
            get {
                return ResourceManager.GetString("QueryWithContains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///`Extent1`.`ID`, 
        ///`Extent1`.`Title`, 
        ///`Extent1`.`ReleaseDate`, 
        ///`Extent1`.`Genre`, 
        ///`Extent1`.`Price`, 
        ///`Extent1`.`Data`, 
        ///`Extent1`.`Director_ID`
        ///FROM `Movies` AS `Extent1`
        /// WHERE `Extent1`.`Title` LIKE :p__linq__0 的本地化字符串。
        /// </summary>
        internal static string QueryWithEndsWith {
            get {
                return ResourceManager.GetString("QueryWithEndsWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///`Project1`.`ID`, 
        ///`Project1`.`Title`, 
        ///`Project1`.`ReleaseDate`, 
        ///`Project1`.`Genre`, 
        ///`Project1`.`Price`, 
        ///`Project1`.`Data`, 
        ///`Project1`.`Director_ID`
        ///FROM `Movies` AS `Project1`
        /// WHERE `Project1`.`Title` LIKE :p__linq__0
        /// ORDER BY 
        ///`Project1`.`ID` DESC LIMIT 10 的本地化字符串。
        /// </summary>
        internal static string QueryWithOrderByTakeContains {
            get {
                return ResourceManager.GetString("QueryWithOrderByTakeContains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///`Extent1`.`ID`, 
        ///`Extent1`.`Title`, 
        ///`Extent1`.`ReleaseDate`, 
        ///`Extent1`.`Genre`, 
        ///`Extent1`.`Price`, 
        ///`Extent1`.`Data`, 
        ///`Extent1`.`Director_ID`
        ///FROM `Movies` AS `Extent1`
        /// WHERE `Extent1`.`Title` LIKE :p__linq__0 的本地化字符串。
        /// </summary>
        internal static string QueryWithStartsWith {
            get {
                return ResourceManager.GetString("QueryWithStartsWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT 
        ///`Project2`.`customer_id`, 
        ///`Project2`.`store_id`, 
        ///`Project2`.`first_name`, 
        ///`Project2`.`last_name`, 
        ///`Project2`.`email`, 
        ///`Project2`.`address_id`, 
        ///`Project2`.`active`, 
        ///`Project2`.`create_date`, 
        ///`Project2`.`last_update`
        /// FROM `sakila`.`customer` AS `Project2`
        /// WHERE EXISTS(SELECT 
        ///1 AS `C1`
        /// FROM `sakila`.`rental` AS `Extent2`
        /// WHERE (`Project2`.`customer_id` = `Extent2`.`customer_id`) AND (`Extent2`.`rental_date` &lt; :p__linq__0))
        /// ORDER BY 
        ///`Project2`.`customer_id` ASC 的本地化字符串。
        /// </summary>
        internal static string ReplaceNameVisitorQuery {
            get {
                return ResourceManager.GetString("ReplaceNameVisitorQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///`Project1`.`HarborId`, 
        ///`Project1`.`Description`, 
        ///`Project1`.`C2` AS `C1`, 
        ///`Project1`.`ShipId`, 
        ///`Project1`.`HarborId1`, 
        ///`Project1`.`Description1`, 
        ///`Project1`.`C1` AS `C2`, 
        ///`Project1`.`CrewMemberId`, 
        ///`Project1`.`ShipId1`, 
        ///`Project1`.`RankId`, 
        ///`Project1`.`ClearanceId`, 
        ///`Project1`.`Description2`, 
        ///`Project1`.`RankId1`, 
        ///`Project1`.`Description3`, 
        ///`Project1`.`ClearanceId1`, 
        ///`Project1`.`Description4`
        ///FROM (SELECT
        ///`Extent1`.`HarborId`, 
        ///`Extent1`.`Description`, 
        ///`Join3`.`Shi [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string ShipQueryMalformedDueMultipleProjecttionsCorrectedEF6 {
            get {
                return ResourceManager.GetString("ShipQueryMalformedDueMultipleProjecttionsCorrectedEF6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///  `Extent1`.`ID`, 
        ///  `Extent1`.`Title`, 
        ///  `Extent1`.`ReleaseDate`, 
        ///  `Extent1`.`Genre`, 
        ///  `Extent1`.`Price`, 
        ///  `Extent1`.`Data`, 
        ///  `Extent1`.`Director_ID`
        ///  FROM `Movies` AS `Extent1`
        ///   WHERE (:gp1 IN ( :gp2 )) AND (:gp3 IS NOT NULL) 的本地化字符串。
        /// </summary>
        internal static string TestContainsListWitConstant {
            get {
                return ResourceManager.GetString("TestContainsListWitConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///  `Extent1`.`ID`, 
        ///  `Extent1`.`Title`, 
        ///  `Extent1`.`ReleaseDate`, 
        ///  `Extent1`.`Genre`, 
        ///  `Extent1`.`Price`, 
        ///  `Extent1`.`Data`, 
        ///  `Extent1`.`Director_ID`
        ///  FROM `Movies` AS `Extent1`
        ///   WHERE (`Extent1`.`ID` IN ( 1,2,3 )) AND (`Extent1`.`ID` IS NOT NULL) 的本地化字符串。
        /// </summary>
        internal static string TestContainsListWithCast {
            get {
                return ResourceManager.GetString("TestContainsListWithCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT 
        ///`Extent1`.`ID`, 
        ///`Extent1`.`Title`, 
        ///`Extent1`.`ReleaseDate`, 
        ///`Extent1`.`Genre`, 
        ///`Extent1`.`Price`, 
        ///`Extent1`.`Data`, 
        ///`Extent1`.`Director_ID`
        /// FROM `Movies` AS `Extent1`
        /// WHERE (:p__linq__0 IN ( 1,2,3 )) AND (:p__linq__0 IS NOT NULL) 的本地化字符串。
        /// </summary>
        internal static string TestContainsListWithParameterReference {
            get {
                return ResourceManager.GetString("TestContainsListWithParameterReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT
        ///  `Project1`.`ID` AS `C1`
        ///  FROM `Movies` AS `Project1`
        ///   WHERE (`Project1`.`ID`) = :p__linq__0
        ///   ORDER BY 
        ///  `Project1`.`ID` ASC 的本地化字符串。
        /// </summary>
        internal static string UnknownProjectC1 {
            get {
                return ResourceManager.GetString("UnknownProjectC1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 SELECT 
        ///`Project1`.`ID` AS `C1`
        /// FROM `Movies` AS `Project1`
        /// WHERE (((`Project1`.`ID`) = :p__linq__0) AND (NOT ((`Project1`.`ID` IS  NULL) OR (:p__linq__0 IS  NULL)))) OR ((`Project1`.`ID` IS  NULL) AND (:p__linq__0 IS  NULL))
        /// ORDER BY 
        ///`Project1`.`ID` ASC 的本地化字符串。
        /// </summary>
        internal static string UnknownProjectC1EF6 {
            get {
                return ResourceManager.GetString("UnknownProjectC1EF6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 UPDATE `MovieRelease2` SET `Name`=&apos;Director\&apos;s Cut&apos; WHERE (`Id` = 1) AND (`RowVersion` = 0); SELECT `RowVersion` FROM `MovieRelease2` WHERE row_count() = 1 and (`Id` = 1) 的本地化字符串。
        /// </summary>
        internal static string UpdateWithSelectWithDbGeneratedLock1 {
            get {
                return ResourceManager.GetString("UpdateWithSelectWithDbGeneratedLock1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 UPDATE `MovieRelease2` SET `Name`=&apos;Avengers&apos; WHERE (`Id` = 1) AND (`RowVersion` = 1); SELECT `RowVersion` FROM `MovieRelease2` WHERE row_count() = 1 and (`Id` = 1) 的本地化字符串。
        /// </summary>
        internal static string UpdateWithSelectWithDbGeneratedLock2 {
            get {
                return ResourceManager.GetString("UpdateWithSelectWithDbGeneratedLock2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 UPDATE `MovieReleases` SET `Name`=&apos;Director\&apos;s Cut&apos; WHERE (`Id` = 1) AND (`Name` = &apos;Commercial&apos;); SELECT `Timestamp` FROM `MovieReleases` WHERE row_count() = 1 and ((`Id` = 1) AND (`Name` = &apos;Director\&apos;s Cut&apos;)) 的本地化字符串。
        /// </summary>
        internal static string UpdateWithSelectWithNonDbGeneratedLock {
            get {
                return ResourceManager.GetString("UpdateWithSelectWithNonDbGeneratedLock", resourceCulture);
            }
        }
    }
}
